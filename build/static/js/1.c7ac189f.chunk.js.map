{"version":3,"sources":["../node_modules/icheck/icheck.js"],"names":["$","_iCheck","_iCheckHelper","_radio","_checked","_unchecked","_disabled","_determinate","_indeterminate","_update","_type","_touch","_add","_remove","_callback","_label","_cursor","_mobile","test","navigator","userAgent","operate","input","direct","method","node","state","active","checked","disabled","indeterminate","attr","on","off","each","keep","parent","callback","regular","option","capitalize","specific","name","form","closest","inputs","length","find","this","data","callbacks","css","tidy","html","s","unwrap","id","add","o","string","charAt","toUpperCase","slice","fn","options","fire","handle","stack","walker","object","self","is","toLowerCase","isFunction","settings","extend","checkedClass","disabledClass","indeterminateClass","labelHover","selector","hoverClass","focusClass","activeClass","labelHoverClass","area","increaseArea","replace","helper","offset","size","layer","position","top","left","display","width","height","margin","padding","background","border","opacity","hide","visibility","className","checkboxClass","radioClass","label","aria","ariaID","Math","random","toString","substr","wrap","append","insert","appendTo","inheritClass","inheritID","_click","event","type","item","target","stopPropagation","key","keyCode","toggle","window","jQuery","Zepto"],"mappings":"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","file":"static/js/1.c7ac189f.chunk.js","sourcesContent":["/*!\n * iCheck v1.0.2, http://git.io/arlzeA\n * ===================================\n * Powerful jQuery and Zepto plugin for checkboxes and radio buttons customization\n *\n * (c) 2013 Damir Sultanov, http://fronteed.com\n * MIT Licensed\n */\n(function ($) {\n  // Cached vars\n  var _iCheck = 'iCheck',\n      _iCheckHelper = _iCheck + '-helper',\n      _checkbox = 'checkbox',\n      _radio = 'radio',\n      _checked = 'checked',\n      _unchecked = 'un' + _checked,\n      _disabled = 'disabled',\n      _determinate = 'determinate',\n      _indeterminate = 'in' + _determinate,\n      _update = 'update',\n      _type = 'type',\n      _click = 'click',\n      _touch = 'touchbegin.i touchend.i',\n      _add = 'addClass',\n      _remove = 'removeClass',\n      _callback = 'trigger',\n      _label = 'label',\n      _cursor = 'cursor',\n      _mobile = /ipad|iphone|ipod|android|blackberry|windows phone|opera mini|silk/i.test(navigator.userAgent); // Plugin init\n\n\n  $.fn[_iCheck] = function (options, fire) {\n    // Walker\n    var handle = 'input[type=\"' + _checkbox + '\"], input[type=\"' + _radio + '\"]',\n        stack = $(),\n        walker = function walker(object) {\n      object.each(function () {\n        var self = $(this);\n\n        if (self.is(handle)) {\n          stack = stack.add(self);\n        } else {\n          stack = stack.add(self.find(handle));\n        }\n      });\n    }; // Check if we should operate with some method\n\n\n    if (/^(check|uncheck|toggle|indeterminate|determinate|disable|enable|update|destroy)$/i.test(options)) {\n      // Normalize method's name\n      options = options.toLowerCase(); // Find checkboxes and radio buttons\n\n      walker(this);\n      return stack.each(function () {\n        var self = $(this);\n\n        if (options == 'destroy') {\n          tidy(self, 'ifDestroyed');\n        } else {\n          operate(self, true, options);\n        } // Fire method's callback\n\n\n        if ($.isFunction(fire)) {\n          fire();\n        }\n      }); // Customization\n    } else if (typeof options == 'object' || !options) {\n      // Check if any options were passed\n      var settings = $.extend({\n        checkedClass: _checked,\n        disabledClass: _disabled,\n        indeterminateClass: _indeterminate,\n        labelHover: true\n      }, options),\n          selector = settings.handle,\n          hoverClass = settings.hoverClass || 'hover',\n          focusClass = settings.focusClass || 'focus',\n          activeClass = settings.activeClass || 'active',\n          labelHover = !!settings.labelHover,\n          labelHoverClass = settings.labelHoverClass || 'hover',\n          // Setup clickable area\n      area = ('' + settings.increaseArea).replace('%', '') | 0; // Selector limit\n\n      if (selector == _checkbox || selector == _radio) {\n        handle = 'input[type=\"' + selector + '\"]';\n      } // Clickable area limit\n\n\n      if (area < -50) {\n        area = -50;\n      } // Walk around the selector\n\n\n      walker(this);\n      return stack.each(function () {\n        var self = $(this); // If already customized\n\n        tidy(self);\n        var node = this,\n            id = node.id,\n            // Layer styles\n        offset = -area + '%',\n            size = 100 + area * 2 + '%',\n            layer = {\n          position: 'absolute',\n          top: offset,\n          left: offset,\n          display: 'block',\n          width: size,\n          height: size,\n          margin: 0,\n          padding: 0,\n          background: '#fff',\n          border: 0,\n          opacity: 0\n        },\n            // Choose how to hide input\n        hide = _mobile ? {\n          position: 'absolute',\n          visibility: 'hidden'\n        } : area ? layer : {\n          position: 'absolute',\n          opacity: 0\n        },\n            // Get proper class\n        className = node[_type] == _checkbox ? settings.checkboxClass || 'i' + _checkbox : settings.radioClass || 'i' + _radio,\n            // Find assigned labels\n        label = $(_label + '[for=\"' + id + '\"]').add(self.closest(_label)),\n            // Check ARIA option\n        aria = !!settings.aria,\n            // Set ARIA placeholder\n        ariaID = _iCheck + '-' + Math.random().toString(36).substr(2, 6),\n            // Parent & helper\n        parent = '<div class=\"' + className + '\" ' + (aria ? 'role=\"' + node[_type] + '\" ' : ''),\n            helper; // Set ARIA \"labelledby\"\n\n        if (aria) {\n          label.each(function () {\n            parent += 'aria-labelledby=\"';\n\n            if (this.id) {\n              parent += this.id;\n            } else {\n              this.id = ariaID;\n              parent += ariaID;\n            }\n\n            parent += '\"';\n          });\n        } // Wrap input\n\n\n        parent = self.wrap(parent + '/>')[_callback]('ifCreated').parent().append(settings.insert); // Layer addition\n\n        helper = $('<ins class=\"' + _iCheckHelper + '\"/>').css(layer).appendTo(parent); // Finalize customization\n\n        self.data(_iCheck, {\n          o: settings,\n          s: self.attr('style')\n        }).css(hide);\n        !!settings.inheritClass && parent[_add](node.className || '');\n        !!settings.inheritID && id && parent.attr('id', _iCheck + '-' + id);\n        parent.css('position') == 'static' && parent.css('position', 'relative');\n        operate(self, true, _update); // Label events\n\n        if (label.length) {\n          label.on(_click + '.i mouseover.i mouseout.i ' + _touch, function (event) {\n            var type = event[_type],\n                item = $(this); // Do nothing if input is disabled\n\n            if (!node[_disabled]) {\n              // Click\n              if (type == _click) {\n                if ($(event.target).is('a')) {\n                  return;\n                }\n\n                operate(self, false, true); // Hover state\n              } else if (labelHover) {\n                // mouseout|touchend\n                if (/ut|nd/.test(type)) {\n                  parent[_remove](hoverClass);\n\n                  item[_remove](labelHoverClass);\n                } else {\n                  parent[_add](hoverClass);\n\n                  item[_add](labelHoverClass);\n                }\n              }\n\n              if (_mobile) {\n                event.stopPropagation();\n              } else {\n                return false;\n              }\n            }\n          });\n        } // Input events\n\n\n        self.on(_click + '.i focus.i blur.i keyup.i keydown.i keypress.i', function (event) {\n          var type = event[_type],\n              key = event.keyCode; // Click\n\n          if (type == _click) {\n            return false; // Keydown\n          } else if (type == 'keydown' && key == 32) {\n            if (!(node[_type] == _radio && node[_checked])) {\n              if (node[_checked]) {\n                off(self, _checked);\n              } else {\n                on(self, _checked);\n              }\n            }\n\n            return false; // Keyup\n          } else if (type == 'keyup' && node[_type] == _radio) {\n            !node[_checked] && on(self, _checked); // Focus/blur\n          } else if (/us|ur/.test(type)) {\n            parent[type == 'blur' ? _remove : _add](focusClass);\n          }\n        }); // Helper events\n\n        helper.on(_click + ' mousedown mouseup mouseover mouseout ' + _touch, function (event) {\n          var type = event[_type],\n              // mousedown|mouseup\n          toggle = /wn|up/.test(type) ? activeClass : hoverClass; // Do nothing if input is disabled\n\n          if (!node[_disabled]) {\n            // Click\n            if (type == _click) {\n              operate(self, false, true); // Active and hover states\n            } else {\n              // State is on\n              if (/wn|er|in/.test(type)) {\n                // mousedown|mouseover|touchbegin\n                parent[_add](toggle); // State is off\n\n              } else {\n                parent[_remove](toggle + ' ' + activeClass);\n              } // Label hover\n\n\n              if (label.length && labelHover && toggle == hoverClass) {\n                // mouseout|touchend\n                label[/ut|nd/.test(type) ? _remove : _add](labelHoverClass);\n              }\n            }\n\n            if (_mobile) {\n              event.stopPropagation();\n            } else {\n              return false;\n            }\n          }\n        });\n      });\n    } else {\n      return this;\n    }\n  }; // Do something with inputs\n\n\n  function operate(input, direct, method) {\n    var node = input[0],\n        state = /er/.test(method) ? _indeterminate : /bl/.test(method) ? _disabled : _checked,\n        active = method == _update ? {\n      checked: node[_checked],\n      disabled: node[_disabled],\n      indeterminate: input.attr(_indeterminate) == 'true' || input.attr(_determinate) == 'false'\n    } : node[state]; // Check, disable or indeterminate\n\n    if (/^(ch|di|in)/.test(method) && !active) {\n      on(input, state); // Uncheck, enable or determinate\n    } else if (/^(un|en|de)/.test(method) && active) {\n      off(input, state); // Update\n    } else if (method == _update) {\n      // Handle states\n      for (var each in active) {\n        if (active[each]) {\n          on(input, each, true);\n        } else {\n          off(input, each, true);\n        }\n      }\n    } else if (!direct || method == 'toggle') {\n      // Helper or label was clicked\n      if (!direct) {\n        input[_callback]('ifClicked');\n      } // Toggle checked state\n\n\n      if (active) {\n        if (node[_type] !== _radio) {\n          off(input, state);\n        }\n      } else {\n        on(input, state);\n      }\n    }\n  } // Add checked, disabled or indeterminate state\n\n\n  function on(input, state, keep) {\n    var node = input[0],\n        parent = input.parent(),\n        checked = state == _checked,\n        indeterminate = state == _indeterminate,\n        disabled = state == _disabled,\n        callback = indeterminate ? _determinate : checked ? _unchecked : 'enabled',\n        regular = option(input, callback + capitalize(node[_type])),\n        specific = option(input, state + capitalize(node[_type])); // Prevent unnecessary actions\n\n    if (node[state] !== true) {\n      // Toggle assigned radio buttons\n      if (!keep && state == _checked && node[_type] == _radio && node.name) {\n        var form = input.closest('form'),\n            inputs = 'input[name=\"' + node.name + '\"]';\n        inputs = form.length ? form.find(inputs) : $(inputs);\n        inputs.each(function () {\n          if (this !== node && $(this).data(_iCheck)) {\n            off($(this), state);\n          }\n        });\n      } // Indeterminate state\n\n\n      if (indeterminate) {\n        // Add indeterminate state\n        node[state] = true; // Remove checked state\n\n        if (node[_checked]) {\n          off(input, _checked, 'force');\n        } // Checked or disabled state\n\n      } else {\n        // Add checked or disabled state\n        if (!keep) {\n          node[state] = true;\n        } // Remove indeterminate state\n\n\n        if (checked && node[_indeterminate]) {\n          off(input, _indeterminate, false);\n        }\n      } // Trigger callbacks\n\n\n      callbacks(input, checked, state, keep);\n    } // Add proper cursor\n\n\n    if (node[_disabled] && !!option(input, _cursor, true)) {\n      parent.find('.' + _iCheckHelper).css(_cursor, 'default');\n    } // Add state class\n\n\n    parent[_add](specific || option(input, state) || ''); // Set ARIA attribute\n\n\n    if (!!parent.attr('role') && !indeterminate) {\n      parent.attr('aria-' + (disabled ? _disabled : _checked), 'true');\n    } // Remove regular state class\n\n\n    parent[_remove](regular || option(input, callback) || '');\n  } // Remove checked, disabled or indeterminate state\n\n\n  function off(input, state, keep) {\n    var node = input[0],\n        parent = input.parent(),\n        checked = state == _checked,\n        indeterminate = state == _indeterminate,\n        disabled = state == _disabled,\n        callback = indeterminate ? _determinate : checked ? _unchecked : 'enabled',\n        regular = option(input, callback + capitalize(node[_type])),\n        specific = option(input, state + capitalize(node[_type])); // Prevent unnecessary actions\n\n    if (node[state] !== false) {\n      // Toggle state\n      if (indeterminate || !keep || keep == 'force') {\n        node[state] = false;\n      } // Trigger callbacks\n\n\n      callbacks(input, checked, callback, keep);\n    } // Add proper cursor\n\n\n    if (!node[_disabled] && !!option(input, _cursor, true)) {\n      parent.find('.' + _iCheckHelper).css(_cursor, 'pointer');\n    } // Remove state class\n\n\n    parent[_remove](specific || option(input, state) || ''); // Set ARIA attribute\n\n\n    if (!!parent.attr('role') && !indeterminate) {\n      parent.attr('aria-' + (disabled ? _disabled : _checked), 'false');\n    } // Add regular state class\n\n\n    parent[_add](regular || option(input, callback) || '');\n  } // Remove all traces\n\n\n  function tidy(input, callback) {\n    if (input.data(_iCheck)) {\n      // Remove everything except input\n      input.parent().html(input.attr('style', input.data(_iCheck).s || '')); // Callback\n\n      if (callback) {\n        input[_callback](callback);\n      } // Unbind events\n\n\n      input.off('.i').unwrap();\n      $(_label + '[for=\"' + input[0].id + '\"]').add(input.closest(_label)).off('.i');\n    }\n  } // Get some option\n\n\n  function option(input, state, regular) {\n    if (input.data(_iCheck)) {\n      return input.data(_iCheck).o[state + (regular ? '' : 'Class')];\n    }\n  } // Capitalize some string\n\n\n  function capitalize(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  } // Executable handlers\n\n\n  function callbacks(input, checked, callback, keep) {\n    if (!keep) {\n      if (checked) {\n        input[_callback]('ifToggled');\n      }\n\n      input[_callback]('ifChanged')[_callback]('if' + capitalize(callback));\n    }\n  }\n})(window.jQuery || window.Zepto);"],"sourceRoot":""}